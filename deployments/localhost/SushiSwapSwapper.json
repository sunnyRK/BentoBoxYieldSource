{
  "address": "0xcdC9668Fa0472db801c5bb4a529dc213343d9f03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "bentoBox_",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToMin",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountFromMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountTo",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "refundTo",
          "type": "address"
        }
      ],
      "name": "swapExact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa91a7101d9d03cd568b279b28117e487a57d7e94bac317c02ee638cac2ba25cb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "848163",
    "logsBloom": "0x
    "blockHash": "0x4edf70ee27bfcacfc7aa6754c6a6f95a40ab20ed5e3a6397383e4f709252aa30",
    "transactionHash": "0xa91a7101d9d03cd568b279b28117e487a57d7e94bac317c02ee638cac2ba25cb",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "848163",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "0x7364A0eA6C896aE192da52b87dD0DF35B436D851"
  ],
  "solcInputHash": "49dd10c21142f3de1d4cf3403c661c8c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"bentoBox_\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFromMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountTo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"}],\"name\":\"swapExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/SushiSwapSwapper.sol\":\"SushiSwapSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@bartjman/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // EIP 2612\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\",\"keccak256\":\"0x8004f86e4536cca55b8eeb2621fe18e1ee57d779396ddef50bce5bf70fb59867\",\"license\":\"MIT\"},\"@bartjman/boring-solidity/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"BoringMath: Mul Overflow\\\");}\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\",\"keccak256\":\"0x7fd07387abfcf6627a8fc6ab5d5e1238ae0832923fbc1065c2039161ac949e4f\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x72e2361bc17535b5f65d8f95ab9c4cabcfd1744fcd2f3fe799e6661e3ca0a0ca\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x95203b071357552345aa2c4b2afd770ce49d671f41fc370e06112a37a4f6709f\"},\"contracts/interfaces/IBentoBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@bartjman/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ninterface IBentoBox {\\r\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\r\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount);\\r\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool indexed approved);\\r\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 amount);\\r\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount);\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function WETH() external view returns (IERC20);\\r\\n    function balanceOf(IERC20, address) external view returns (uint256);\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\r\\n    function deploy(address masterContract, bytes calldata data) external;\\r\\n    function deposit(IERC20 token, address from, uint256 amount) external payable;\\r\\n    function depositTo(IERC20 token, address from, address to, uint256 amount) external payable;\\r\\n    function masterContractApproved(address, address) external view returns (bool);\\r\\n    function masterContractOf(address) external view returns (address);\\r\\n    function nonces(address) external view returns (uint256);\\r\\n    function permit(IERC20 token, address from, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function skim(IERC20 token) external returns (uint256 amount);\\r\\n    function skimETH() external returns (uint256 amount);\\r\\n    function skimETHTo(address to) external returns (uint256 amount);\\r\\n    function skimTo(IERC20 token, address to) external returns (uint256 amount);\\r\\n    function totalSupply(IERC20) external view returns (uint256);\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\r\\n    function transferFrom(IERC20 token, address from, address to, uint256 amount) external;\\r\\n    function transferMultiple(IERC20 token, address[] calldata tos, uint256[] calldata amounts) external;\\r\\n    function transferMultipleFrom(IERC20 token, address from, address[] calldata tos, uint256[] calldata amounts) external;\\r\\n    function withdraw(IERC20 token, address to, uint256 amount) external;\\r\\n    function withdrawFrom(IERC20 token, address from, address to, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x92486562e408b45a0dee2d1dc2759e9cbb70ad02e854b57c12ef0cd4caee7ba6\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IBentoBox.sol\\\";\\r\\n\\r\\ninterface ISwapper {\\r\\n    // Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper\\r\\n    // Swaps it for at least 'amountToMin' of token 'to'\\r\\n    // Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer\\r\\n    // Returns the amount of tokens 'to' transferred to BentoBox\\r\\n    // (The BentoBox skim function will be used by the caller to get the swapped funds)\\r\\n    function swap(IERC20 from, IERC20 to, uint256 amountFrom, uint256 amountToMin) external returns (uint256 amountTo);\\r\\n\\r\\n    // Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax\\r\\n    // Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper\\r\\n    // Swaps it for exactly 'exactAmountTo' of token 'to'\\r\\n    // Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer\\r\\n    // Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom)\\r\\n    // Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom)\\r\\n    // (The BentoBox skim function will be used by the caller to get the swapped funds)\\r\\n    function swapExact(\\r\\n        IERC20 from, IERC20 to, uint256 amountFromMax,\\r\\n        uint256 exactAmountTo, address refundTo\\r\\n    ) external returns (uint256 amountFrom);\\r\\n}\",\"keccak256\":\"0xf60dcb00aae1e4f4d042a2562adf2dee0672de6b4f7ea8db6b06201645a49828\",\"license\":\"MIT\"},\"contracts/swappers/SushiSwapSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"@bartjman/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@bartjman/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/ISwapper.sol\\\";\\r\\n\\r\\ncontract SushiSwapSwapper is ISwapper {\\r\\n    using BoringMath for uint256;\\r\\n\\r\\n    // Local variables\\r\\n    IBentoBox public bentoBox;\\r\\n    IUniswapV2Factory public factory;\\r\\n\\r\\n    constructor(IBentoBox bentoBox_, IUniswapV2Factory factory_) public {\\r\\n        bentoBox = bentoBox_;\\r\\n        factory = factory_;\\r\\n    }\\r\\n    // Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountIn) {\\r\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // Swaps to a flexible amount, from an exact input amount\\r\\n    function swap(IERC20 from, IERC20 to, uint256 amountFrom, uint256 amountToMin) public override returns (uint256) {\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(address(from), address(to)));\\r\\n\\r\\n        bentoBox.withdraw(from, address(pair), amountFrom);\\r\\n\\r\\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n        uint256 amountTo;\\r\\n        if (pair.token0() == address(from)) {\\r\\n            amountTo = getAmountOut(amountFrom, reserve0, reserve1);\\r\\n            require(amountTo >= amountToMin, \\\"SushiSwapSwapper: not enough\\\");\\r\\n            pair.swap(0, amountTo, address(bentoBox), new bytes(0));\\r\\n        } else {\\r\\n            amountTo = getAmountOut(amountFrom, reserve1, reserve0);\\r\\n            require(amountTo >= amountToMin, \\\"SushiSwapSwapper: not enough\\\");\\r\\n            pair.swap(amountTo, 0, address(bentoBox), new bytes(0));\\r\\n        }\\r\\n        return amountTo;\\r\\n    }\\r\\n\\r\\n    // Swaps to an exact amount, from a flexible input amount\\r\\n    function swapExact(\\r\\n        IERC20 from, IERC20 to, uint256 amountFromMax, uint256 exactAmountTo, address refundTo\\r\\n    ) public override returns (uint256) {\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(address(from), address(to)));\\r\\n\\r\\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n\\r\\n        uint256 amountFrom;\\r\\n        if (pair.token0() == address(from)) {\\r\\n            amountFrom = getAmountIn(exactAmountTo, reserve0, reserve1);\\r\\n            require(amountFrom <= amountFromMax, \\\"SushiSwapSwapper: not enough\\\");\\r\\n            bentoBox.withdraw(from, address(pair), amountFrom);\\r\\n            pair.swap(0, exactAmountTo, address(bentoBox), new bytes(0));\\r\\n        } else {\\r\\n            amountFrom = getAmountIn(exactAmountTo, reserve1, reserve0);\\r\\n            require(amountFrom <= amountFromMax, \\\"SushiSwapSwapper: not enough\\\");\\r\\n            bentoBox.withdraw(from, address(pair), amountFrom);\\r\\n            pair.swap(exactAmountTo, 0, address(bentoBox), new bytes(0));\\r\\n        }\\r\\n\\r\\n        bentoBox.transferFrom(from, address(this), refundTo, amountFromMax.sub(amountFrom));\\r\\n\\r\\n        return amountFrom;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x50dfe755d66ee45d7d54990a1687800d55f45249499fe6550044c46e39709146\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e0b380380610e0b8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560018054939092169216919091179055610d918061007a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063237cdfc7146100515780636b2ace87146100a7578063c45a0155146100cb578063fe029156146100d3575b600080fd5b610095600480360360a081101561006757600080fd5b506001600160a01b03813581169160208101358216916040820135916060810135916080909101351661010f565b60408051918252519081900360200190f35b6100af6106d3565b604080516001600160a01b039092168252519081900360200190f35b6100af6106e2565b610095600480360360808110156100e957600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356106f1565b6001546040805163e6a4390560e01b81526001600160a01b038881166004830152878116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561016657600080fd5b505afa15801561017a573d6000803e3d6000fd5b505050506040513d602081101561019057600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03851691630902f1ac91600480820192606092909190829003018186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d606081101561020557600080fd5b50805160209182015160408051630dfe168160e01b815290516dffffffffffffffffffffffffffff93841696509290911693506000926001600160a01b03808e169390881692630dfe1681926004808301939192829003018186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d602081101561029757600080fd5b50516001600160a01b0316141561046a576102b3878484610b9d565b90508781111561030a576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051636ce5768960e11b81526001600160a01b038e811660048301528881166024830152604482018690529151919092169263d9caed12926064808201939182900301818387803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b50506000805460408051838152602081019182905263022c0d9f60e01b825260248101848152604482018e90526001600160a01b0393841660648301819052608060848401908152835160a48501819052958d16985063022c0d9f97508f959194909160c4850191908083838b5b838110156103fe5781810151838201526020016103e6565b50505050905090810190601f16801561042b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561044d57600080fd5b505af1158015610461573d6000803e3d6000fd5b50505050610629565b610475878385610b9d565b9050878111156104cc576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051636ce5768960e11b81526001600160a01b038e811660048301528881166024830152604482018690529151919092169263d9caed12926064808201939182900301818387803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b50506000805460408051838152602081019182905263022c0d9f60e01b8252602481018d8152604482018590526001600160a01b0393841660648301819052608060848401908152835160a48501819052958d16985063022c0d9f97508f96959194909160c4850191908083838a5b838110156105c15781810151838201526020016105a9565b50505050905090810190601f1680156105ee5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b505050505b6000546001600160a01b03166315dacbea8b30896106478d87610beb565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b50929c9b505050505050505050505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6001546040805163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d602081101561077257600080fd5b50516000805460408051636ce5768960e11b81526001600160a01b038b811660048301528086166024830152604482018a9052915194955091169263d9caed129260648084019391929182900301818387803b1580156107d157600080fd5b505af11580156107e5573d6000803e3d6000fd5b50505050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561082557600080fd5b505afa158015610839573d6000803e3d6000fd5b505050506040513d606081101561084f57600080fd5b50805160209182015160408051630dfe168160e01b815290516dffffffffffffffffffffffffffff93841696509290911693506000926001600160a01b03808d169390881692630dfe1681926004808301939192829003018186803b1580156108b757600080fd5b505afa1580156108cb573d6000803e3d6000fd5b505050506040513d60208110156108e157600080fd5b50516001600160a01b03161415610a44576108fd878484610c49565b905085811015610954576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051838152602081019182905263022c0d9f60e01b825260248101848152604482018690526001600160a01b0393841660648301819052608060848401908152835160a48501819052958b169663022c0d9f96909589959394929160c4850191908083838b5b838110156109d85781810151838201526020016109c0565b50505050905090810190601f168015610a055780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b50505050610b91565b610a4f878385610c49565b905085811015610aa6576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051838152602081019182905263022c0d9f60e01b825260248101858152604482018590526001600160a01b0393841660648301819052608060848401908152835160a48501819052958b169663022c0d9f96899691959394929160c48501918083838a5b83811015610b29578181015183820152602001610b11565b50505050905090810190601f168015610b565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505050505b98975050505050505050565b600080610bb66103e8610bb08688610c97565b90610c97565b90506000610bca6103e5610bb08689610beb565b9050610be16001828481610bda57fe5b0490610d03565b9695505050505050565b80820382811115610c43576040805162461bcd60e51b815260206004820152601560248201527f426f72696e674d6174683a20556e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b600080610c58856103e5610c97565b90506000610c668285610c97565b90506000610c8083610c7a886103e8610c97565b90610d03565b9050808281610c8b57fe5b04979650505050505050565b6000811580610cb257505080820282828281610caf57fe5b04145b610c43576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b81810181811015610c43576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604482015290519081900360640190fdfea26469706673582212208431805580115a4218a2702751164c06e7c68831d0d9db9bd71ce3eec2311fe064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063237cdfc7146100515780636b2ace87146100a7578063c45a0155146100cb578063fe029156146100d3575b600080fd5b610095600480360360a081101561006757600080fd5b506001600160a01b03813581169160208101358216916040820135916060810135916080909101351661010f565b60408051918252519081900360200190f35b6100af6106d3565b604080516001600160a01b039092168252519081900360200190f35b6100af6106e2565b610095600480360360808110156100e957600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356106f1565b6001546040805163e6a4390560e01b81526001600160a01b038881166004830152878116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561016657600080fd5b505afa15801561017a573d6000803e3d6000fd5b505050506040513d602081101561019057600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03851691630902f1ac91600480820192606092909190829003018186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d606081101561020557600080fd5b50805160209182015160408051630dfe168160e01b815290516dffffffffffffffffffffffffffff93841696509290911693506000926001600160a01b03808e169390881692630dfe1681926004808301939192829003018186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d602081101561029757600080fd5b50516001600160a01b0316141561046a576102b3878484610b9d565b90508781111561030a576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051636ce5768960e11b81526001600160a01b038e811660048301528881166024830152604482018690529151919092169263d9caed12926064808201939182900301818387803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b50506000805460408051838152602081019182905263022c0d9f60e01b825260248101848152604482018e90526001600160a01b0393841660648301819052608060848401908152835160a48501819052958d16985063022c0d9f97508f959194909160c4850191908083838b5b838110156103fe5781810151838201526020016103e6565b50505050905090810190601f16801561042b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561044d57600080fd5b505af1158015610461573d6000803e3d6000fd5b50505050610629565b610475878385610b9d565b9050878111156104cc576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051636ce5768960e11b81526001600160a01b038e811660048301528881166024830152604482018690529151919092169263d9caed12926064808201939182900301818387803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b50506000805460408051838152602081019182905263022c0d9f60e01b8252602481018d8152604482018590526001600160a01b0393841660648301819052608060848401908152835160a48501819052958d16985063022c0d9f97508f96959194909160c4850191908083838a5b838110156105c15781810151838201526020016105a9565b50505050905090810190601f1680156105ee5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b505050505b6000546001600160a01b03166315dacbea8b30896106478d87610beb565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b50929c9b505050505050505050505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6001546040805163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d602081101561077257600080fd5b50516000805460408051636ce5768960e11b81526001600160a01b038b811660048301528086166024830152604482018a9052915194955091169263d9caed129260648084019391929182900301818387803b1580156107d157600080fd5b505af11580156107e5573d6000803e3d6000fd5b50505050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561082557600080fd5b505afa158015610839573d6000803e3d6000fd5b505050506040513d606081101561084f57600080fd5b50805160209182015160408051630dfe168160e01b815290516dffffffffffffffffffffffffffff93841696509290911693506000926001600160a01b03808d169390881692630dfe1681926004808301939192829003018186803b1580156108b757600080fd5b505afa1580156108cb573d6000803e3d6000fd5b505050506040513d60208110156108e157600080fd5b50516001600160a01b03161415610a44576108fd878484610c49565b905085811015610954576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051838152602081019182905263022c0d9f60e01b825260248101848152604482018690526001600160a01b0393841660648301819052608060848401908152835160a48501819052958b169663022c0d9f96909589959394929160c4850191908083838b5b838110156109d85781810151838201526020016109c0565b50505050905090810190601f168015610a055780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b50505050610b91565b610a4f878385610c49565b905085811015610aa6576040805162461bcd60e51b815260206004820152601c60248201527f537573686953776170537761707065723a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b6000805460408051838152602081019182905263022c0d9f60e01b825260248101858152604482018590526001600160a01b0393841660648301819052608060848401908152835160a48501819052958b169663022c0d9f96899691959394929160c48501918083838a5b83811015610b29578181015183820152602001610b11565b50505050905090810190601f168015610b565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505050505b98975050505050505050565b600080610bb66103e8610bb08688610c97565b90610c97565b90506000610bca6103e5610bb08689610beb565b9050610be16001828481610bda57fe5b0490610d03565b9695505050505050565b80820382811115610c43576040805162461bcd60e51b815260206004820152601560248201527f426f72696e674d6174683a20556e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b600080610c58856103e5610c97565b90506000610c668285610c97565b90506000610c8083610c7a886103e8610c97565b90610d03565b9050808281610c8b57fe5b04979650505050505050565b6000811580610cb257505080820282828281610caf57fe5b04145b610c43576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b81810181811015610c43576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604482015290519081900360640190fdfea26469706673582212208431805580115a4218a2702751164c06e7c68831d0d9db9bd71ce3eec2311fe064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9788,
        "contract": "contracts/swappers/SushiSwapSwapper.sol:SushiSwapSwapper",
        "label": "bentoBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBentoBox)6933"
      },
      {
        "astId": 9790,
        "contract": "contracts/swappers/SushiSwapSwapper.sol:SushiSwapSwapper",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Factory)3045"
      }
    ],
    "types": {
      "t_contract(IBentoBox)6933": {
        "encoding": "inplace",
        "label": "contract IBentoBox",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)3045": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      }
    }
  }
}